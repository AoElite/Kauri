package dev.brighten.anticheat.check.impl.packets.exploits;

import cc.funkemunky.api.events.impl.PacketReceiveEvent;
import cc.funkemunky.api.events.impl.PacketSendEvent;
import cc.funkemunky.api.tinyprotocol.api.Packet;
import cc.funkemunky.api.tinyprotocol.packet.in.WrappedInFlyingPacket;
import cc.funkemunky.api.utils.Priority;
import cc.funkemunky.api.utils.RunUtils;
import dev.brighten.anticheat.check.api.Check;
import dev.brighten.anticheat.check.api.CheckInfo;
import dev.brighten.anticheat.check.api.Event;
import dev.brighten.anticheat.check.api.Setting;
import dev.brighten.api.check.CheckType;
import org.bukkit.util.Vector;

@CheckInfo(name = "LargeMove", description = "Checks if the player moves extremely far.", vlToFlag = 3,
        checkType = CheckType.EXPLOIT)
public class LargeMove extends Check {

    private Vector from;
    private long lastTeleport;

    @Setting(name = "closeChannel")
    private static boolean closeChannel = true;

    @Setting(name = "bukkitKick.enabled")
    private static boolean bukkitKick = false;

    @Setting(name = "cancelPacket")
    private static boolean cancelPacket = true;

    @Setting(name = "bukkitKick.message")
    private static String bukkitKickMessage = "Illegal move";

    @Event(priority = Priority.LOW)
    public void onPacket(PacketReceiveEvent event) {
        if(event.getType().equals(Packet.Client.POSITION)
                || event.getType().equals(Packet.Client.POSITION_LOOK)) {
            WrappedInFlyingPacket packet = new WrappedInFlyingPacket(event.getPacket(), event.getPlayer());
            Vector to = new Vector(packet.getX(), packet.getY(), packet.getZ());

            if(event.getTimeStamp() - data.creation > 200L
                    && event.getTimeStamp() - lastTeleport > 3000L
                    && from != null) {
                double distance, deltaY = to.getY() - from.getY();

                double deltaXZ = to.clone().setY(0).distance(from.clone().setY(0));
                if(deltaY > -0.0981 && deltaY < -0.0979 && deltaXZ < 1) return;
                distance = to.distance(from);
                if(Math.abs(to.getY()) > 1000) {
                    vl++;
                    flag("type=%s y=%s", 1, to.getY());

                    if(cancelPacket)
                    event.setCancelled(true);
                    if(closeChannel)
                    closePlayerChannel();
                    else if(bukkitKick) RunUtils.task(() -> event.getPlayer().kickPlayer(bukkitKickMessage));
                } else if(distance > 100) {
                    vl++;
                    flag("type=%s dist=%.2f", 2, distance);

                    if(cancelPacket)
                        event.setCancelled(true);
                    if(closeChannel)
                        closePlayerChannel();
                    else if(bukkitKick) RunUtils.task(() -> event.getPlayer().kickPlayer(bukkitKickMessage));
                }
            }

            from = to;
        }
    }

    @Event(priority = Priority.HIGH)
    public void onSend(PacketSendEvent event) {
        if(event.getType().equalsIgnoreCase(Packet.Server.POSITION)) {
            lastTeleport = event.getTimeStamp();
            data.runKeepaliveAction(ka -> lastTeleport = event.getTimeStamp());
        } else if(event.getType().equals(Packet.Server.RESPAWN)) {
            lastTeleport = event.getTimeStamp();
            data.runKeepaliveAction(ka -> lastTeleport = event.getTimeStamp());
        }
    }
}
