package dev.brighten.anticheat.check.impl.packets.exploits;

import cc.funkemunky.api.events.impl.PacketReceiveEvent;
import cc.funkemunky.api.tinyprotocol.api.Packet;
import dev.brighten.anticheat.check.api.Check;
import dev.brighten.anticheat.check.api.CheckInfo;
import dev.brighten.anticheat.check.api.Event;
import dev.brighten.anticheat.check.api.Setting;
import dev.brighten.api.check.CheckType;
import lombok.AllArgsConstructor;
import lombok.NoArgsConstructor;

import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@CheckInfo(name = "PacketSpam", description = "Prevents the spam of packets.",
        checkType = CheckType.EXPLOIT, punishVL = 30, executable = false)
public class PacketSpam extends Check {

    @Setting(name = "whitelistedPackets")
    private static List<String> whitelistedPackets = Arrays.asList(Packet.Client.CHAT, Packet.Client.WINDOW_CLICK,
            "PacketPlayInSetCreativeSlot", Packet.Client.TRANSACTION);

    private Map<String, PacketTicks> packetsMap = new HashMap<>();

    @Setting(name = "thresholds.payloadBase")
    private static int payloadThresholdBase = 25;

    @Setting(name = "thresholds.generalBase")
    private static int generalThresholdBase = 80;

    @Event
    public void onReceive(PacketReceiveEvent event) {
        if(whitelistedPackets.contains(event.getType()) || event.getTimeStamp() - data.creation < 1000) return;

        PacketTicks packets = packetsMap.getOrDefault(event.getType(),
                new PacketTicks(0, event.getTimeStamp()));

        if(event.getTimeStamp() - packets.lastReset <= 200) {
            int thresholdBase = event.getType().equals(Packet.Client.CUSTOM_PAYLOAD)
                    ? payloadThresholdBase : generalThresholdBase;
            if(++packets.ticks > thresholdBase) {
                vl++;
                flag(true, "ticks=" + packets.ticks + " packet=" + event.getType());
                if(packets.ticks > thresholdBase * 2) {
                    kickPlayer();
                }
                event.setCancelled(true);
            } else if(packets.ticks > 5) {
                debug("type=%v ticks=%v", event.getType(), packets.ticks);
            }
        } else {
            packets.ticks = 0;
            packets.lastReset = event.getTimeStamp();
        }
        packetsMap.put(event.getType(), packets);
    }

    @AllArgsConstructor
    @NoArgsConstructor
    public class PacketTicks {
        public int ticks;
        public long lastReset;
    }
}
