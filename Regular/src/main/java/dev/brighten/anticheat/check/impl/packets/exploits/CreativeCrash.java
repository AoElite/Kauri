package dev.brighten.anticheat.check.impl.packets.exploits;

import cc.funkemunky.api.events.impl.PacketReceiveEvent;
import cc.funkemunky.api.tinyprotocol.api.Packet;
import cc.funkemunky.api.tinyprotocol.packet.in.WrappedInSetCreativeSlotPacket;
import cc.funkemunky.api.utils.RunUtils;
import dev.brighten.anticheat.check.api.Check;
import dev.brighten.anticheat.check.api.CheckInfo;
import dev.brighten.anticheat.check.api.Event;
import dev.brighten.anticheat.check.api.Setting;
import dev.brighten.api.check.CheckType;
import org.bukkit.GameMode;
import org.bukkit.inventory.meta.BookMeta;

@CheckInfo(name = "CreativeCrash", description = "Patches all exploits and crashers using PacketPlayInSetCreativeSlot",
        checkType = CheckType.EXPLOIT, punishVL = 1, developer = true)
public class CreativeCrash extends Check {

    @Setting(name = "closeChannel")
    private static boolean closeChannel = true;

    @Setting(name = "bukkitKick.enabled")
    private static boolean bukkitKick = false;

    @Setting(name = "cancelPacket")
    private static boolean cancelPacket = true;

    @Setting(name = "impossibleItemCreate")
    private static boolean impossibleItemCreate = true;

    @Setting(name = "bukkitKick.message")
    private static String bukkitKickMessage = "Illegal packet";

    @Event
    public void onEvent(PacketReceiveEvent event) {
        if(event.getType().equals(Packet.Client.CREATIVE_SLOT)) {
            WrappedInSetCreativeSlotPacket packet =
                    new WrappedInSetCreativeSlotPacket(event.getPacket(), event.getPlayer());

            CRASH: {
                boolean flagged = false;
                CREATIVE:
                {
                    if(event.getPlayer().getGameMode().equals(GameMode.CREATIVE)) break CREATIVE;

                    if (!event.getPlayer().getGameMode().equals(GameMode.CREATIVE)) {
                        vl++;
                        flag("category=%v type=%v reason=%v", "CRASH", "CREATIVE",
                                "Sent PacketPlayInSetCreativeSlot without being in creative");
                        flagged = true;
                    }
                }
                BOOK_PAGES:
                {
                    if(packet.itemStack == null
                            || !packet.itemStack.getType().name().contains("BOOK")) break BOOK_PAGES;

                    BookMeta meta = (BookMeta) packet.itemStack.getItemMeta();

                    int pages = meta.getPages().size();
                    if (pages > 0) {
                        vl++;
                        flag("category=%v type=%v reason=%v", "CRASH", "BOOK_PAGES",
                                "Book was created with " + pages + " pages.");
                        flagged = true;
                    }
                }
                if(flagged) {
                    if (cancelPacket)
                        event.setCancelled(true);
                    if (closeChannel)
                        closePlayerChannel();
                    else if (bukkitKick) RunUtils.task(() -> event.getPlayer().kickPlayer(bukkitKickMessage));
                }
            }
            IMPOSSIBLE_ITEM: {
                if(!impossibleItemCreate || packet.itemStack == null) break IMPOSSIBLE_ITEM;

                boolean flagged = false;
                ENCHANT_SIZE:
                {
                    int size = packet.itemStack.getEnchantments().size();

                    if(size <= 1) break ENCHANT_SIZE;

                    vl++;
                    flag("category=%v type=%v reason=%v",
                            "EXPLOIT", "ENCHANT_SIZE",
                            "Created item" + packet.itemStack.getType().name() + " with enchantment size " + size);
                    flagged = true;
                }

                if(flagged) event.setCancelled(true);
            }
        }
    }
}
