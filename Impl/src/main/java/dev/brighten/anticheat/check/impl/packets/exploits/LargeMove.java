package dev.brighten.anticheat.check.impl.packets.exploits;

import cc.funkemunky.api.events.impl.PacketReceiveEvent;
import cc.funkemunky.api.events.impl.PacketSendEvent;
import cc.funkemunky.api.tinyprotocol.api.Packet;
import cc.funkemunky.api.tinyprotocol.packet.in.WrappedInFlyingPacket;
import cc.funkemunky.api.tinyprotocol.packet.out.WrappedOutPositionPacket;
import cc.funkemunky.api.utils.MathUtils;
import cc.funkemunky.api.utils.Priority;
import dev.brighten.anticheat.check.api.Check;
import dev.brighten.anticheat.check.api.CheckInfo;
import dev.brighten.anticheat.check.api.Event;
import dev.brighten.api.check.CheckType;
import org.bukkit.util.Vector;

@CheckInfo(name = "LargeMove", description = "Checks if the player moves extremely far.", checkType = CheckType.EXPLOIT)
public class LargeMove extends Check {

    private Vector from, teleportLoc;
    private long lastRespawn;

    @Event(priority = Priority.LOW)
    public void onPacket(PacketReceiveEvent event) {
        if(event.getType().equals(Packet.Client.POSITION)
                || event.getType().equals(Packet.Client.POSITION_LOOK)) {
            WrappedInFlyingPacket packet = new WrappedInFlyingPacket(event.getPacket(), event.getPlayer());
            Vector to = new Vector(packet.getX(), packet.getY(), packet.getZ());

            if(event.getTimeStamp() - data.creation > 2000
                    && event.getTimeStamp() - lastRespawn > 100L + data.lagInfo.ping
                    && from != null
                    && event.getTimeStamp() - data.playerInfo.lastServerPos > 120) {
                double distance, deltaY = to.getY() - from.getY();

                if(teleportLoc != null && teleportLoc.clone().setY(0)
                        .distance(to.clone().setY(0)) <= 1E-8
                        && MathUtils.getDelta(teleportLoc.getY(), to.getY()) < 4) {
                    teleportLoc = null;
                    return;
                }

                double deltaXZ = to.clone().setY(0).distance(from.clone().setY(0));
                if(deltaY > -0.0981 && deltaY < -0.0979 && deltaXZ < 0.5) return;
                distance = to.distance(from);
                if(Math.abs(to.getY()) > 1E6) {
                    vl++;
                    flag("type=1 y=" + to.getY());
                    event.setCancelled(true);
                } else if(distance > 100) {
                    flag("type=&v dist=%v.2", 2, distance);
                    event.setCancelled(true);
                }
            }

            from = to;
        }
    }

    @Event(priority = Priority.HIGH)
    public void onSend(PacketSendEvent event) {
        if(event.getType().equalsIgnoreCase(Packet.Server.POSITION)) {
            WrappedOutPositionPacket packet = new WrappedOutPositionPacket(event.getPacket(), event.getPlayer());

            teleportLoc = new Vector(packet.getX(), packet.getY(), packet.getZ());
        } else if(event.getType().equals(Packet.Server.RESPAWN)) {
            lastRespawn = event.getTimeStamp();
        }
    }
}
