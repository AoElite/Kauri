package dev.brighten.anticheat.check.impl.packets.exploits;

import cc.funkemunky.api.events.impl.PacketReceiveEvent;
import cc.funkemunky.api.tinyprotocol.api.Packet;
import cc.funkemunky.api.utils.RunUtils;
import dev.brighten.anticheat.Kauri;
import dev.brighten.anticheat.check.api.Check;
import dev.brighten.anticheat.check.api.CheckInfo;
import dev.brighten.anticheat.check.api.Event;
import dev.brighten.api.check.CheckType;

import java.util.HashMap;
import java.util.Map;

@CheckInfo(name = "PacketSpam", description = "Prevents the spam of arm animation packets.",
        checkType = CheckType.EXPLOIT, punishVL = 5)
public class PacketSpam extends Check {

    private int verbose;
    private Map<String, Long> lastPacket = new HashMap<>();

    @Event
    public void onReceive(PacketReceiveEvent event) {
        if (event.getType().contains("Creative") && data.playerInfo.creative) return;
        long timeStamp = System.currentTimeMillis();

        String type = event.getType().contains("Flying") ? "Flying" : event.getType();

        long lastTS = lastPacket.getOrDefault(type, 0L);
        long delta = timeStamp - lastTS;

        if (delta < 5) {
            if ((verbose += event.getType().equalsIgnoreCase(Packet.Client.CUSTOM_PAYLOAD) ? 4 : 1) > 100) {
                vl++;
                flag("type=%1 vb=%2", type, verbose);
                if (verbose > 200) {
                    kickPlayer();
                    RunUtils.task(() -> event.getPlayer().kickPlayer("Packet spam"), Kauri.INSTANCE);
                }
                event.setCancelled(true);
            } else if (verbose > 30) event.setCancelled(true);
            debug("type=%1 vb=%2", type, verbose);
        } else verbose -= verbose > 0 ? 1 : 0;
        lastPacket.put(type, timeStamp);
    }
}
