package dev.brighten.anticheat.check.impl.packets.exploits;

import cc.funkemunky.api.events.impl.PacketReceiveEvent;
import cc.funkemunky.api.reflections.types.WrappedClass;
import cc.funkemunky.api.reflections.types.WrappedMethod;
import cc.funkemunky.api.tinyprotocol.api.Packet;
import cc.funkemunky.api.tinyprotocol.api.ProtocolVersion;
import cc.funkemunky.api.tinyprotocol.api.TinyProtocolHandler;
import cc.funkemunky.api.tinyprotocol.api.packets.channelhandler.TinyProtocol1_7;
import cc.funkemunky.api.tinyprotocol.api.packets.channelhandler.TinyProtocol1_8;
import cc.funkemunky.api.utils.RunUtils;
import dev.brighten.anticheat.Kauri;
import dev.brighten.anticheat.check.api.Check;
import dev.brighten.anticheat.check.api.CheckInfo;
import dev.brighten.anticheat.check.api.Event;
import dev.brighten.api.check.CheckType;
import lombok.val;
import org.bukkit.entity.Player;

import java.util.HashMap;
import java.util.Map;

@CheckInfo(name = "PacketSpam", description = "Prevents the spam of arm animation packets.",
        checkType = CheckType.EXPLOIT, punishVL = 5)
public class PacketSpam extends Check {

    private int verbose;
    private Map<String, Long> lastPacket = new HashMap<>();
    private static WrappedClass protocolClass = ProtocolVersion.getGameVersion().isBelow(ProtocolVersion.V1_8)
            ? new WrappedClass(TinyProtocol1_7.class) : new WrappedClass(TinyProtocol1_8.class);
    private static WrappedMethod getChannel = protocolClass.getMethod("getChannel", Player.class);

    @Event
    public void onReceive(PacketReceiveEvent event) {
        if(event.getType().contains("Creative") && data.playerInfo.creative) return;
        long timeStamp = System.currentTimeMillis();

        String type = event.getType().contains("Flying") ? "Flying" : event.getType();

        long lastTS = lastPacket.getOrDefault(type, 0L);
        long delta = timeStamp - lastTS;

        if(delta < 5) {
            if((verbose+= event.getType().equalsIgnoreCase(Packet.Client.CUSTOM_PAYLOAD) ? 4 : 1) > 60) {
                vl++;
                flag("type=%1 vb=%2", type, verbose);
                if(verbose > 100) {
                    kickPlayer();
                    RunUtils.task(() -> event.getPlayer().kickPlayer("Packet spam"), Kauri.INSTANCE);
                }
                event.setCancelled(true);
            } else if(verbose > 40) event.setCancelled(true);
            debug("type=%1 vb=%2", type, verbose);
        } else verbose-= verbose > 0 ? 1 : 0;
        lastPacket.put(type, timeStamp);
    }

    private void kickPlayer() {
        val channel = getChannel.invoke(TinyProtocolHandler.getInstance(), data.getPlayer());

        val wrapped = new WrappedClass(channel.getClass());

        wrapped.getMethod("close").invoke(channel);
    }
}
