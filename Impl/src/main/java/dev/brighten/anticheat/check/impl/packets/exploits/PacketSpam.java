package dev.brighten.anticheat.check.impl.packets.exploits;

import cc.funkemunky.api.events.impl.PacketReceiveEvent;
import cc.funkemunky.api.tinyprotocol.api.Packet;
import dev.brighten.anticheat.check.api.Check;
import dev.brighten.anticheat.check.api.CheckInfo;
import dev.brighten.anticheat.check.api.Event;
import dev.brighten.anticheat.check.api.Setting;
import dev.brighten.api.check.CheckType;

import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@CheckInfo(name = "PacketSpam", description = "Prevents the spam of packets.",
        checkType = CheckType.EXPLOIT, punishVL = 30)
public class PacketSpam extends Check {

    private Map<String, Long> lastPacket = new HashMap<>();
    private Map<String, Integer> verboseMap = new HashMap<>();

    @Setting(name = "whitelistedPackets")
    private List<String> whitelistedPackets = Arrays.asList(Packet.Client.CHAT, Packet.Client.WINDOW_CLICK,
            "PacketPlayInSetCreativeSlot");

    @Event
    public void onReceive(PacketReceiveEvent event) {
        if(whitelistedPackets.contains(event.getType())) return;
        long timeStamp = event.getTimeStamp();

        String type = event.getType().contains("Flying") ? "Flying" : event.getType();
        long lastReset = lastPacket.computeIfAbsent(type, key -> {
            lastPacket.put(key, timeStamp);
            return timeStamp;
        });

        if(timeStamp - lastReset > 500L) {
            verboseMap.computeIfPresent(type, (key, ticks) -> {
                if(ticks > (type.equals(Packet.Client.CUSTOM_PAYLOAD) ? 50 : 100)) {
                    vl++;
                    flag("type=%v packets=%v", type, ticks);
                    kickPlayer();
                    event.setCancelled(true);
                }
                verboseMap.put(type, ticks = 0);
                lastPacket.put(type, timeStamp);
                return ticks;
            });
        } else {
            int ticks = verboseMap.getOrDefault(type, 0);

            verboseMap.put(type, ++ticks);
        }
    }
}
